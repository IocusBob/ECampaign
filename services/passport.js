var passport = require("passport")
var keys = require('../config/keys')
const GoogleStrategy = require("passport-google-oauth20").Strategy
const mongoose = require('mongoose');

// Now we are fetching the user object/table out of mongoose and assigning it to User
const User = mongoose.model('users')

// when the done method is called inside the passport.use callback function, the model instance that is fetched/created is passed
// into the first argument of passport.serializeUser((<thisIsThatUser, done)). the <done> argument is the callback
passport.serializeUser((user, done)=>{
    // user.id is NOT the googleId that we captured, it is the ID that is automatically generated by mongo/it is kinda like the PK 
    // This is the part of code that prepares and sends a cookie to the web browser
    done(null, user.id);
});


// in deserializeUser, this time we have the id from the cookie (as thats what we sent in the serializeUser done() callback) and we try to
// find a record that matches this user in our debugger, then deserializeUser the cookie with the done callback. null is again error handling/object
passport.deserializeUser((userId, done)=>{
    User.findById(userId).then((user)=>{
        done(null, user)
    })
});

// passport.use() - telling passport to be aware of a new strategy available
// new GoogleStrategy() - Creates a new google passport stratety instance for passport to use. Config goes into the contructor ().
passport.use(new GoogleStrategy({
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: "/auth/google/callback"
    },
    (accessToken, refreshToken, profile, done)=>{
        User.findOne({ googleId: profile.id })
            .then((existingUser) =>{
                if (existingUser){
                    done(null, existingUser);
                } else {
                    new User({googleId: profile.id}).save().then(newUser => {
                        done(null, user)
                    })
                }
            });
        }
    )
);